{"version":3,"sources":["assets/img/background-img.jpg","routes.js","containers/DefaultLayout/DefaultLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","react_default","a","createElement","routes","path","name","component","Loadable","loader","e","then","bind","loading","DefaultLayout","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tmpRoutes","Switch","map","route","idx","Route","key","exact","render","Redirect","from","to","Component","App","HashRouter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mOCIxC,SAASC,IACP,OAAOC,EAAAC,EAAAC,cAAA,yBAIT,IAuBiBC,EARA,CAGb,CAAEC,KAAM,QAASC,KAAM,OAAQC,UAlBtBC,IAAS,CAClBC,OAAQ,kBAAMX,EAAAY,EAAA,GAAAC,KAAAb,EAAAc,KAAA,WACdC,QAASb,KAiBT,CAAEK,KAAM,SAAUC,KAAM,QAASC,UAdrBC,IAAS,CACrBC,OAAQ,kBAAMX,EAAAY,EAAA,GAAAC,KAAAb,EAAAc,KAAA,WACdC,QAASb,KAaT,CAAEK,KAAM,SAAUC,KAAM,QAASC,UAVrBC,IAAS,CACrBC,OAAQ,kBAAMX,EAAAY,EAAA,GAAAC,KAAAb,EAAAc,KAAA,WACdC,QAASb,MCQEc,qBAnBX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,0EAKR,IAAIO,EAAYlB,EAClB,OACIH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACOD,EAAUE,IAAI,SAACC,EAAOC,GACrB,OAAQzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,IAAKF,EAAKrB,KAAMoB,EAAMpB,KAAMwB,MAAOJ,EAAMI,MAAOvB,KAAMmB,EAAMnB,KAAMwB,OAAQ,SAAAf,GAAK,OAC1Fd,EAAAC,EAAAC,cAACsB,EAAMlB,UAAcQ,QAE3Bd,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUC,KAAK,IAAIC,GAAG,kBAdRC,cCuBbC,mLAVX,OACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOtB,KAAK,IAAIC,KAAK,OAAOC,UAAWO,aAL/BoB,aCREG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASZ,OAAO7B,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.b0306308.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background-img.ded9a6e4.jpg\";","import React from 'react';\r\nimport Loadable from 'react-loadable'\r\nimport DefaultLayout from './containers/DefaultLayout/DefaultLayout';\r\n\r\nfunction Loading() {\r\n  return <div>Loading...</div>;\r\n}\r\n\r\n\r\nconst Home = Loadable({\r\n    loader: () => import('./views/Home/Home.jsx'),\r\n    loading: Loading,\r\n  });\r\n\r\n  const About = Loadable({\r\n    loader: () => import('./views/About/About.jsx'),\r\n    loading: Loading,\r\n  });\r\n\r\n  const Cakes = Loadable({\r\n    loader: () => import('./views/Cakes/Cakes.jsx'),\r\n    loading: Loading,\r\n  });\r\n\r\n  const routes = [\r\n    // { path: '/', exact: true, name: 'Home', component: DefaultLayout },\r\n    // { path: '/dashboard', name: 'Dashboard', component: Dashboard },\r\n    { path: '/home', name: 'Home', component: Home },\r\n    { path: '/about', name: 'About', component: About },\r\n    { path: '/cakes', name: 'Cakes', component: Cakes },\r\n  ];\r\n\r\n  export default routes;\r\n","import React, { Component } from 'react';\r\nimport { Redirect, Route, Switch, NavLink } from 'react-router-dom';\r\n\r\nimport navigation from '../../nav';\r\n// routes config\r\nimport routes from '../../routes';\r\nimport bgImage from \"../../assets/img/background-img.jpg\"\r\n\r\n\r\nclass DefaultLayout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n\r\n  render() {\r\n      let tmpRoutes = routes;\r\n    return (\r\n        <Switch>\r\n              {tmpRoutes.map((route, idx) => {\r\n                return  <Route key={idx} path={route.path} exact={route.exact} name={route.name} render={props => (\r\n                    <route.component {...props}/>\r\n                )} /> })}\r\n              <Redirect from=\"/\" to=\"/home\" />\r\n            </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DefaultLayout;","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\n// Styles\r\n// CoreUI Icons Set\r\n// import '@coreui/icons/css/coreui-icons.min.css';\r\n// // Import Flag Icons Set\r\n// import 'flag-icon-css/css/flag-icon.min.css';\r\n// // Import Font Awesome Icons Set\r\n// import 'font-awesome/css/font-awesome.min.css';\r\n// // Import Simple Line Icons Set\r\n// import 'simple-line-icons/css/simple-line-icons.css';\r\n// // Import Main styles for this application\r\nimport './scss/style.css'\r\n\r\n// Containers\r\nimport DefaultLayout from './containers/DefaultLayout/DefaultLayout';\r\n\r\n// import { renderRoutes } from 'react-router-config';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\r\n        </Switch>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./scss/style.css\"\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}